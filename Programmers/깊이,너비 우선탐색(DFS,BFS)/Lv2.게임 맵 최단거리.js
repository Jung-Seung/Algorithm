/*
문제 설명
ROR 게임은 두 팀으로 나누어서 진행하며, 상대 팀 진영을 먼저 파괴하면 이기는 게임입니다. 따라서, 각 팀은 상대 팀 진영에 최대한 빨리 도착하는 것이 유리합니다.
지금부터 당신은 한 팀의 팀원이 되어 게임을 진행하려고 합니다. 다음은 5 x 5 크기의 맵에, 당신의 캐릭터가 (행: 1, 열: 1) 위치에 있고, 상대 팀 진영은 (행: 5, 열: 5) 위치에 있는 경우의 예시입니다.
위 그림에서 검은색 부분은 벽으로 막혀있어 갈 수 없는 길이며, 흰색 부분은 갈 수 있는 길입니다. 캐릭터가 움직일 때는 동, 서, 남, 북 방향으로 한 칸씩 이동하며, 게임 맵을 벗어난 길은 갈 수 없습니다.
아래 예시는 캐릭터가 상대 팀 진영으로 가는 두 가지 방법을 나타내고 있습니다.
첫 번째 방법은 11개의 칸을 지나서 상대 팀 진영에 도착했습니다.
두 번째 방법은 15개의 칸을 지나서 상대팀 진영에 도착했습니다.
위 예시에서는 첫 번째 방법보다 더 빠르게 상대팀 진영에 도착하는 방법은 없으므로, 이 방법이 상대 팀 진영으로 가는 가장 빠른 방법입니다.
만약, 상대 팀이 자신의 팀 진영 주위에 벽을 세워두었다면 상대 팀 진영에 도착하지 못할 수도 있습니다. 예를 들어, 다음과 같은 경우에 당신의 캐릭터는 상대 팀 진영에 도착할 수 없습니다.
게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요. 단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 해주세요.

제한사항
maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수입니다.
n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않습니다.
maps는 0과 1로만 이루어져 있으며, 0은 벽이 있는 자리, 1은 벽이 없는 자리를 나타냅니다.
처음에 캐릭터는 게임 맵의 좌측 상단인 (1, 1) 위치에 있으며, 상대방 진영은 게임 맵의 우측 하단인 (n, m) 위치에 있습니다.

입출력 예
maps	                                                        answer
[[1,0,1,1,1],[1,0,1,0,1],[1,0,1,1,1],[1,1,1,0,1],[0,0,0,0,1]]	11
[[1,0,1,1,1],[1,0,1,0,1],[1,0,1,1,1],[1,1,1,0,0],[0,0,0,0,1]]	-1
 
입출력 예 설명
입출력 예 #1
주어진 데이터는 다음과 같습니다.
캐릭터가 적 팀의 진영까지 이동하는 가장 빠른 길은 다음 그림과 같습니다.
따라서 총 11칸을 캐릭터가 지나갔으므로 11을 return 하면 됩니다.

입출력 예 #2
문제의 예시와 같으며, 상대 팀 진영에 도달할 방법이 없습니다. 따라서 -1을 return 합니다.
*/

function solution(maps) {
    const lenY = maps.length;
    const lenX = maps[0].length;
    const goalY = lenY - 1;
    const goalX = lenX - 1;
    const my = [0, 0, 1, -1];
    const mx = [-1, 1, 0, 0];
    
    const queue = [];
    queue.push([0, 0, 1]);
    
    while(queue.length) {
        const [curY, curX, move] = queue.shift();
        if(curY === goalY && curX === goalX) return move;
        
        for(let i = 0; i < 4; i++) {
            const ny = curY + my[i];
            const nx = curX + mx[i];
            if(ny >= 0 && ny < lenY && nx >= 0 && nx < lenX && maps[ny][nx] === 1) {
                queue.push([ny, nx, move + 1]);
                maps[ny][nx] = 0;
            }
        }
    }
    
    return -1;
}

// 최단거리 문제는 많은 분들이 다들 아시겠지만 BFS로 해결합니다!
// 먼저 maps의 행과 열의 개수, 즉 세로와 가로의 길이 yLen, xLen,
// 도착 지점의 좌표 goalY, goalX,
// 상하좌우로 이동하기에 상하좌우로 이동할 시의 칸수를 담은 dy, dx 를 먼저 만들어 둡니다.
// 그리고 BFS에 사용할 queue를 생성하고, 처음 시작은 무조건 가장 좌측의 가장 상단에서 시작하므로 0, 0 좌표와 이동한 칸 수 까지 해서 [0, 0, 1] 을 시작으로 하기위해 push 해둡니다.
// 이제 while문을 사용해 BFS를 시작합니다.
// 현재 위치, 현재까지 이동한 칸 수를 queue에서 빼오면서 현재의 위치가 도착지점의 좌표와 같으면 현재까지 이동한 칸 수를 그대로 반환합니다.
// 그렇지않으면 상, 하, 좌, 우 로 이동하기 위해 4번의 반복문을 돌립니다.
// 상, 하, 좌, 우로 이동했을 시의 좌표를 구하고 해당 좌표가 maps를 벗어나지 않고, 이동 가능하다는 뜻인 1의 값을 가지고 있다면 해당 좌표와 이동한 칸 수를 1 증가시켜 queue에 담습니다.
// 그리고 해당 칸은 이제 다시 밟지 않도록 0으로 변경해줍니다.
// 위 과정을 반복하여 도착지점에 도착했을 때의 이동한 칸 수를 반환하거나, 모든 칸을 돌았으나 도착지점에 갈 수 없었고 반복문을 나왔다면 -1을 반환하는 것으로 문제를 해결할 수 있습니다.