/*
문제 설명
코니는 매일 다른 옷을 조합하여 입는것을 좋아합니다.

예를 들어 코니가 가진 옷이 아래와 같고, 오늘 코니가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야합니다.

종류	이름
얼굴	동그란 안경, 검정 선글라스
상의	파란색 티셔츠
하의	청바지
겉옷	긴 코트
코니는 각 종류별로 최대 1가지 의상만 착용할 수 있습니다. 예를 들어 위 예시의 경우 동그란 안경과 검정 선글라스를 동시에 착용할 수는 없습니다.
착용한 의상의 일부가 겹치더라도, 다른 의상이 겹치지 않거나, 혹은 의상을 추가로 더 착용한 경우에는 서로 다른 방법으로 옷을 착용한 것으로 계산합니다.
코니는 하루에 최소 한 개의 의상은 입습니다.
 
코니가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
- clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.
- 코니가 가진 의상의 수는 1개 이상 30개 이하입니다.
- 같은 이름을 가진 의상은 존재하지 않습니다.
- clothes의 모든 원소는 문자열로 이루어져 있습니다.
- 모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 '_' 로만 이루어져 있습니다..
*/

function solution(clothes) {
    const clothesMap = {};
    let answer = 1;
    // 의상 종류별로 갯수 저장
    clothes.forEach(arr => { // clothes 배열 순회하면서 각 요소를 arr 배열에 할당, 코드 블록 실행. arr은 clothes 배열의 각 요소를 나타내는 임시 변수
        const [type, name] = arr;
        if(clothesMap.hasOwnProperty(name)) { // clothesMap 객체에 name 속성이 있는지 확인하는 조건문
            clothesMap[name]++; // 존재한다면 해당 종류 개수를 증가
        }
        else {
            clothesMap[name] = 1; // 객체에 해당 종류의 의상이 존재하지 않는 경우, 해당 의상이 처음 추가된 것이므로 name 속성 추가, 1로 초기화
        }
    })
    for(const key in clothesMap) {
        // 해당 종류의 의상을 입지 않는 경우도 고려하여, 의상 개수에 1을 더한 값을 answer에 곱하기
        // key는 각 속성의 이름을 나타내는 변수. clothesMap 객체에 저장된 의상 종류별 개수를 처리하는 역할
        answer *= (clothesMap[key] + 1); // clothesMap[key]는 key에 해당하는 속성 값, 즉 의상 종류별 개수를 나타냄.
    }
    // 모든 종류의 의상에 대한 처리가 완료되면, 모든 의상을 입지 않는 경우를 제외하기 위해 answer에서 1을 빼고 반환
    return answer - 1;
}

/*
객체 clothesMap 초기화:
clothesMap은 의상 이름(name)을 키(key)로 사용하며, 각 의상 종류별 개수를 값(value)로 저장하는 객체입니다.
초기에 clothesMap은 빈 객체로 선언되어 있습니다.

의상 종류별로 개수 세기:
forEach 메서드를 사용하여 clothes 배열을 순회합니다. 각 요소(arr)는 의상의 종류(type)와 이름(name)을 나타내는 배열입니다.
arr 배열의 첫 번째 요소(type)는 사용하지 않고, 두 번째 요소(name)는 의상의 이름입니다.
clothesMap 객체에 해당 이름(name)의 속성이 이미 존재한다면, 해당 종류 개수를 1 증가시킵니다.
만약 해당 이름(name)의 속성이 존재하지 않는다면, 해당 의상 종류가 처음 추가된 것이므로 새로운 속성으로 추가하고 값을 1로 초기화합니다.

가능한 의상 조합의 수 계산:
for...in 구문을 사용하여 clothesMap 객체의 각 속성(key)을 순회합니다. 각 속성(key)은 의상의 이름(name)을 나타냅니다.
각 의상 종류별로, 의상을 입지 않는 경우도 고려하여 가능한 모든 조합의 수를 계산합니다.
clothesMap[key]는 현재 의상 종류(key)의 개수를 나타냅니다.
가능한 조합의 수는 (의상 종류 개수 + 1)로 계산합니다. 이는 의상 종류를 선택하지 않은 경우(의상을 입지 않은 경우)도 고려한 것입니다.
answer 변수에 해당 가능한 조합의 수를 곱합니다.

모든 의상을 입지 않는 경우 제외:
모든 의상 종류에 대한 처리가 완료되면, 모든 의상을 입지 않는 경우를 제외하기 위해 answer에서 1을 빼고 반환합니다.
*/

/*
먼저, clothesMap 객체를 생성합니다. 이 객체는 의상 이름(name)을 key로 사용하며, 해당 의상의 종류별 개수를 value로 가집니다. 
clothes 배열을 순회하며, clothesMap 객체에 의상 이름이 이미 존재하면 해당 종류 개수를 증가시키고, 존재하지 않으면 해당 종류의 의상이 처음 추가되었으므로 value를 1로 초기화합니다.

이후, clothesMap 객체를 순회하며 의상을 입지 않는 경우도 고려하여 의상 개수에 1을 더한 값을 answer에 곱합니다. 이렇게 하면 모든 종류의 의상을 입을 수 있는 경우까지 고려할 수 있습니다. 
예를 들어, 의상 종류가 모자, 상의, 바지로 주어졌고 각각 2개, 3개, 4개의 의상이 있을 때, 각 종류별 의상을 입는 경우의 수는 (2+1) * (3+1) * (4+1) = 30입니다. 
이때, 1을 더하는 이유는 해당 종류의 의상을 입지 않는 경우도 고려하기 위함입니다.

마지막으로, 모든 종류의 의상에 대한 처리가 완료되면 모든 의상을 입지 않는 경우를 제외하기 위해 answer에서 1을 빼고 반환합니다. 이렇게 하면 최종적으로 가능한 모든 의상 조합의 수가 반환됩니다.
*/