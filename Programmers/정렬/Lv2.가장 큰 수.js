/*
문제 설명
0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.

예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.

0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.

제한사항
- numbers의 길이는 1 이상 100,000 이하입니다.
- numbers의 원소는 0 이상 1,000 이하입니다.
- 정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.

입출력 예
numbers	            return
[6, 10, 2]	        "6210"
[3, 30, 34, 5, 9]	"9534330"
*/

function solution(numbers) {
    // numbers로 입력된 숫자 리스트를 아래와 같은 기준으로 정렬
    // - 비교되는 두 숫자를 a+b, b+a 와 같이 두 경우로 이은 숫자 중 큰 수의 앞에 있는 수가 앞,
    //   뒤에 있는 수가 뒤에 오도록 정렬
    const sortNum = (a, b) => {
        return parseInt(b.toString() + a.toString()) - parseInt(a.toString() + b.toString())
    }
    // 위에서 정렬한 리스트를 이어서 문자열로 반환
    var answer = numbers.sort(sortNum).join("");
    
    // 문자열의 가장 앞이 0일 경우 0으로, 아닐 경우 만들어진 문자열로 반환
    return answer[0] == '0' ? '0' : answer;
}

/*
정렬 기준 함수:
sortNum 함수는 비교되는 두 숫자를 a+b와 b+a로 이은 숫자 중 큰 수를 앞에 오도록 정렬합니다.
이를 위해 두 숫자를 문자열로 변환한 뒤, 각각을 앞뒤로 이어 붙여 숫자로 변환하여 크기를 비교합니다.
반환 값은 두 숫자를 비교하여 얻은 차이값입니다. (양수면 b를 앞에, 음수면 a를 앞에 위치시킵니다.)

숫자 정렬:
numbers 배열을 sortNum 함수를 기준으로 정렬합니다.
이렇게 정렬된 배열을 문자열로 이어붙인 결과를 answer 변수에 할당합니다.

결과 반환:
answer의 가장 앞의 문자가 '0'인지 확인합니다.
만약 가장 앞의 문자가 '0'이라면, 전체 문자열이 '0'으로 구성된 것이므로 '0'을 반환합니다.
그렇지 않다면, 정렬된 숫자들을 이어붙인 문자열인 answer를 그대로 반환합니다.

두 숫자를 이어붙인 뒤 크기를 비교하여 정렬하고, 이렇게 정렬된 숫자들을 문자열로 이어붙인 결과를 반환합니다.
반환된 문자열의 가장 앞의 문자가 '0'인지 확인하여 0으로 구성된 경우에는 '0'을 반환합니다. 그 외의 경우에는 정렬된 숫자들을 이어붙인 문자열을 그대로 반환합니다.
*/

/*
먼저, sortNum 함수를 정의합니다. 이 함수는 비교되는 두 숫자 a와 b를 받아서 두 가지 경우로 이어붙인 숫자를 비교하고, 큰 수가 앞에 오도록 정렬합니다.

이렇게 정의한 sortNum 함수를 사용하여 numbers 배열을 정렬합니다. sortNum 함수를 이용하면 두 숫자를 이어붙여서 만든 숫자들을 비교할 때, 두 숫자를 어떤 순서로 이어붙일지에 따라 큰 수가 앞에 오도록 정렬됩니다.

예를 들어, numbers 배열이 [6, 10, 2]라면, sortNum 함수를 사용하여 정렬하면 아래와 같이 됩니다.

6과 10을 이어붙인 숫자는 610과 106이 되며, 두 숫자를 비교하면 610이 더 큽니다.
10과 2를 이어붙인 숫자는 102와 210이 되며, 두 숫자를 비교하면 210이 더 큽니다.
6과 2를 이어붙인 숫자는 62와 26이 되며, 두 숫자를 비교하면 62가 더 큽니다.
따라서 정렬 결과는 [6, 2, 10]이 됩니다.

이후에는 정렬된 numbers 배열을 join 메서드를 이용하여 문자열로 합칩니다. 그리고 문자열의 가장 앞에 있는 숫자가 0일 경우 '0'으로 반환하고, 그렇지 않으면 만들어진 문자열로 반환합니다.

예를 들어, 정렬된 numbers 배열이 [6, 2, 10]일 경우, join 메서드를 사용하여 "6210"이라는 문자열로 합칩니다. 가장 앞에 있는 숫자가 6이므로 반환 값은 "6210"이 됩니다.

하지만, 정렬된 numbers 배열이 [0, 0, 0]일 경우, join 메서드를 사용하여 "000"이라는 문자열로 합칩니다. 
가장 앞에 있는 숫자가 0이므로 반환 값은 "0"이 됩니다. 이는 0이 여러 개 있는 경우에는 한 번만 나타내어야 하기 때문입니다.
*/