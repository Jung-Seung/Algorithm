/*
문제 설명
프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.

입출력 예
progresses	                speeds	            return
[93, 30, 55]	            [1, 30, 5]	        [2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]

입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.
*/

// 방법 1
function solution(progresses, speeds) {
    // 결과를 저장할 배열
    var answer = [];
    // 현재 확인 중인 작업의 인덱스
    var curLocation = 0;
    // 모든 작업이 완료될 때까지 반복
    while (curLocation < progresses.length) {
        // 각 작업의 진행 상태를 갱신
        for (let i = curLocation; i < progresses.length; i++) {
            progresses[i] += speeds[i];
        }
        // 현재 위치부터 작업이 완료된 개수를 세는 변수
        let count = 0;
        // 현재 위치부터 작업이 완료되었는지 확인
        for (let i = curLocation; i < progresses.length; i++) {
            if (progresses[i] >= 100) {
                count++;
            } else {
                // 작업이 아직 완료되지 않았다면 더 이상 확인하지 않음
                break;
            }
        }
        // 완료된 작업이 있으면
        if (count > 0) {
            // 현재 위치를 완료된 작업의 다음 위치로 갱신하고, 완료된 작업의 개수를 결과 배열에 추가
            curLocation += count;
            answer.push(count);
        }
    }
    // 최종적으로 완료된 작업들의 개수를 배열로 반환
    return answer;
}

/*
초기 설정:
빈 배열 answer를 생성합니다. 이 배열은 각 배포마다 완료되는 기능의 개수를 저장합니다.
curLocation 변수를 0으로 초기화합니다. 이 변수는 현재 처리되고 있는 작업의 인덱스를 나타냅니다.

작업 진도 업데이트:
while 루프를 실행하여 curLocation이 progresses 배열의 길이보다 작은 동안 작업 진도를 업데이트합니다.
현재 위치 curLocation부터 progresses 배열의 끝까지 반복하면서 작업 속도를 더해 작업 진도를 업데이트합니다.

기능 완료 여부 확인:
count 변수를 0으로 초기화합니다. 이 변수는 현재 배포에서 완료된 기능의 개수를 나타냅니다.
현재 위치 curLocation부터 progresses 배열의 끝까지 반복하면서 작업 진도가 100 이상인지 확인합니다.
작업 진도가 100 이상인 경우 count를 증가시킵니다. 그렇지 않으면 반복문을 종료합니다.

배포 처리:
count가 0보다 큰 경우, 배포된 기능이 있는 것이므로 curLocation을 count만큼 증가시키고 answer 배열에 count를 추가합니다.

결과 반환:
모든 작업이 처리될 때까지 반복하며 answer 배열에는 각 배포마다 완료된 기능의 개수가 저장되고, 이를 반환합니다.
*/

// 방법 2
function solution(progresses, speeds) {
    // 결과를 저장할 배열
    const answer = [];
    // 진행 상태가 100%가 되기까지의 최대 날짜
    let days = 0;
    // 모든 작업에 대해 반복
    for (let i = 0; i < progresses.length; i++) {
        // 해당 작업이 완료되기까지 필요한 날짜 계산
        const needDays = Math.ceil((100 - progresses[i]) / speeds[i]);
        // 이전 작업들보다 더 오래 걸린다면
        if (needDays > days) {
            // 최대 날짜를 갱신하고, 새로운 작업으로 인한 완료된 작업 개수(1)를 결과 배열에 추가
            days = needDays;
            answer.push(1);
        } else {
            // 현재 작업이 이전 작업과 동시에 완료되면 이전 작업의 완료된 작업 개수를 증가
            answer[answer.length - 1]++;
        }
    }
    // 최종적으로 완료된 작업들의 개수를 배열로 반환
    return answer;
}

/*
초기 설정:
빈 배열 answer를 생성합니다. 이 배열은 각 배포마다 완료되는 기능의 개수를 저장합니다.
days 변수를 0으로 초기화합니다. 이 변수는 이전 작업까지 걸린 일수를 나타냅니다.

작업 진도 계산:
for 루프를 실행하여 각 작업의 필요 일수를 계산합니다.
작업의 필요 일수는 (100 - progresses[i]) / speeds[i]로 계산되고, 소수점 이하의 값이 존재할 경우 Math.ceil 함수를 사용하여 올림 처리합니다.

배포 처리:
현재 작업의 필요 일수 needDays와 이전 작업까지 걸린 일수 days를 비교합니다.
needDays가 더 크면 현재 작업이 더 오래 걸리는 것이므로 days를 업데이트하고 answer 배열에 1을 추가합니다.
needDays가 더 작거나 같으면 현재 작업이 이전 작업과 함께 배포될 수 있는 것이므로 answer 배열의 마지막 요소에 1을 추가합니다.

결과 반환:
모든 작업에 대해 반복하며 answer 배열에는 각 배포마다 완료된 기능의 개수가 저장되고, 이를 반환합니다.
*/
