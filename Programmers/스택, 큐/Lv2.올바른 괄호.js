/*
문제 설명
괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다. 예를 들어

"()()" 또는 "(())()" 는 올바른 괄호입니다.
")()(" 또는 "(()(" 는 올바르지 않은 괄호입니다.

'(' 또는 ')' 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.

제한사항

문자열 s의 길이 : 100,000 이하의 자연수
문자열 s는 '(' 또는 ')' 로만 이루어져 있습니다.
입출력 예

s	        answer
"()()"	    true
"(())()"	true
")()("	    false
"(()("	    false

입출력 예 설명
입출력 예 #1,2,3,4
문제의 예시와 같습니다.
*/

function solution(s){
    var answer = true;
    // 괄호 갯수를 체크하는 변수 생성
    var bracketList=0;
    // 괄호 문자열(s)에서 괄호 하나하나 확인
    for(let i=0;i<s.length;i++){
        // 열린 괄호 찾으면 변수의 값을 1 증가
        if(s[i] === '('){
            bracketList++;
        // 닫힌 괄호 찾으면 현재 변수 값이 양수인지 확인
        } else {
            // 값이 양수라면 열린 괄호가 앞에 있으므로 정상적임을 판단, 변수 값 1 감소
            if(bracketList>0){
            bracketList--;
        } else {
            // 값이 양수가 아니라면 열린 괄호가 앞에 없는 비정상적임을 판단, false 반환
            answer=false;
            break;
        }
    }
}
    // 모든 괄호 문자열(s) 확인한 결과 변수가 0보다 크면 열린 괄호가 더 많다는 의미, false 반환
    if(bracketList>0){
        answer=false
    }

    // 변수가 0이면 true 반환
    return answer;
}

/*
초기 설정:
올바른 괄호 문자열인지 판별하는 변수 answer를 true로 초기화합니다.
열린 괄호의 개수를 저장하는 변수 bracketList를 0으로 초기화합니다.

괄호 확인:
주어진 문자열 s를 순회하며 괄호를 하나씩 확인합니다.
만약 열린 괄호를 만나면 bracketList의 값을 1 증가시킵니다.
닫힌 괄호를 만나면 현재 bracketList의 값이 양수인지 확인합니다.
값이 양수라면 열린 괄호가 앞에 있으므로 정상적인 괄호 쌍임을 판단하고, bracketList의 값을 1 감소시킵니다.
값이 양수가 아니라면 열린 괄호가 앞에 없는 비정상적인 괄호 쌍임을 판단하고, answer를 false로 설정하고 반복문을 종료합니다.

결과 반환:
모든 괄호를 확인한 후, bracketList의 값이 0보다 크다면 열린 괄호가 더 많은 경우로 비정상적인 괄호 쌍임을 판단하여 answer를 false로 설정합니다.
그렇지 않다면 answer는 여전히 true이므로 올바른 괄호 문자열임을 의미합니다.
answer를 반환합니다.
*/